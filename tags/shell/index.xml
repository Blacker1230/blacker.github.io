<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Shell on 李岩</title><link>https://liyan-ah.github.io/tags/shell/</link><description>Recent content in Shell on 李岩</description><generator>Hugo -- gohugo.io</generator><language>zh-Hans</language><lastBuildDate>Thu, 12 Nov 2020 21:44:28 +0000</lastBuildDate><atom:link href="https://liyan-ah.github.io/tags/shell/index.xml" rel="self" type="application/rss+xml"/><item><title>find匹配文件名</title><link>https://liyan-ah.github.io/p/find%E5%8C%B9%E9%85%8D%E6%96%87%E4%BB%B6%E5%90%8D/</link><pubDate>Thu, 12 Nov 2020 21:44:28 +0000</pubDate><guid>https://liyan-ah.github.io/p/find%E5%8C%B9%E9%85%8D%E6%96%87%E4%BB%B6%E5%90%8D/</guid><description>&lt;p>目录内容：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">text text.bak
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>希望从中找到&lt;code>text.bak&lt;/code>。使用&lt;code>find&lt;/code>实现。&lt;/p>
&lt;p>错误操作：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">&amp;gt;find -name *.bak* .
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">find: paths must precede expression: .
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Usage: find [-H] [-L] [-P] [-Olevel] [-D help|tree|search|stat|rates|opt|exec] [path...] [expression]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>-name&lt;/code>会作为&lt;code>EXPRESSIONS&lt;/code>存在。&lt;code>find&lt;/code>要求的参数位置为：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">find [-H] [-L] [-P] [-D debugopts] [-Olevel] [path...] [expression]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>所以，正确格式为：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">find . -name *.bak
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">./text.bak
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>关于正则中&lt;code>.&lt;/code>会作为通配符，如需匹配&lt;code>text.bak&lt;/code>需要对&lt;code>.&lt;/code>进行转义的情况，也需要关注下。本例中就不涉及了。&lt;/p></description></item><item><title>sed使用备注</title><link>https://liyan-ah.github.io/p/sed%E4%BD%BF%E7%94%A8%E5%A4%87%E6%B3%A8/</link><pubDate>Thu, 12 Nov 2020 16:36:51 +0000</pubDate><guid>https://liyan-ah.github.io/p/sed%E4%BD%BF%E7%94%A8%E5%A4%87%E6%B3%A8/</guid><description>&lt;h2 id="sed功能介绍">
&lt;a href="#sed%e5%8a%9f%e8%83%bd%e4%bb%8b%e7%bb%8d">#&lt;/a>
sed功能介绍
&lt;/h2>&lt;p>先看下官方的介绍&lt;/p>
&lt;blockquote>
&lt;p>Sed is a stream editor. A stream editor is used to perform basic text transformations on an input stream (a file or input from a pipeline).&lt;br>
While in some ways similar to an editor which permits scripted edits (such as ed), sed works by making only one pass over the input(s), and&lt;br>
is consequently more efficient. But it is sed’s ability to filter text in a pipeline which particularly distinguishes it from other types of&lt;br>
editors.&lt;/p>
&lt;/blockquote>
&lt;p>大概的意思，是面向流的文本编辑工具。一般用来对文件中的文本进行替换等操作。&lt;br>
以下备注一些常用的操作方式了。&lt;/p>
&lt;h2 id="使用介绍">
&lt;a href="#%e4%bd%bf%e7%94%a8%e4%bb%8b%e7%bb%8d">#&lt;/a>
使用介绍
&lt;/h2>&lt;p>我们以上段文字为例，使用&lt;code>sed&lt;/code>进行文本的操作。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">sed -i &amp;#34;s#Sed#SED#g&amp;#34; text
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">使用 -i 才可以直接修改 text 里面的内容，否则无法修改（但是会将修改后的内容输出到标准输出）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">这里使用#作为sed的限位符而非/，是因为一般文本中，/符号出现的频率要较#高。直接使用#就不需要频繁转义了。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sed -i &amp;#39;2,2 s#in#in_#g&amp;#39; text
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">将 行号 [2,2] 中的 in 全部替换为 in_，注意，input也会被替换为in_put
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sed -i &amp;#39;/While.*/, /.*editors/ s#in#in_#g&amp;#39; text
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">将 While.* .*editors 之间的 in 全部替换为 in_
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sed -i &amp;#39;2,+1 s#in#in_#g&amp;#39; text
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">将 [2, 2+1=3] 行内的 in 全部替换为 in_
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>基本上常用的一些 &lt;code>sed&lt;/code>替换方式就是这些了。&lt;code>man&lt;/code>文档中还有一些基于倍数的替换范围决定方式，这里就不说明了。使用的时候，还是尽量使用通俗易懂的方式。&lt;/p></description></item><item><title>shell-访问字符串同名变量</title><link>https://liyan-ah.github.io/p/shell-%E8%AE%BF%E9%97%AE%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%90%8C%E5%90%8D%E5%8F%98%E9%87%8F/</link><pubDate>Tue, 04 Jun 2019 21:53:00 +0000</pubDate><guid>https://liyan-ah.github.io/p/shell-%E8%AE%BF%E9%97%AE%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%90%8C%E5%90%8D%E5%8F%98%E9%87%8F/</guid><description>&lt;p>考虑以下场景：&lt;br>
期望通过给定的变量名称&lt;code>var_str&lt;/code>，打印出该名称对应的变量值&lt;code>${var_str}&lt;/code>。使用指令&lt;code>eval&lt;/code>可以很方便的实现：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="n">var_str&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;1213&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">ned_param_name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;var_str&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">eval&lt;/span> &lt;span class="n">echo&lt;/span> &lt;span class="s1">&amp;#39;$&amp;#39;&lt;/span>&lt;span class="s2">&amp;#34;${ned_param_name}&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>输出结果为&lt;code>1213&lt;/code>;&lt;/p>
&lt;p>&lt;code>eval&lt;/code>命令解释如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">eval [arg ...]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> The args are read and concatenated together into a single command.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> This command is then read and executed by the shell, and its exit status is returned as
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">the value of eval. If there are no args, or only null arguments, eval returns 0.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">eval [参数 ...]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 参数将会被读取并作为一个指令被读入。然后这个指令将会被shell读取并执行，执行结果
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">将会作为eval的结果。如果没有参数传入，或者只有空参数，eval指令将会返回0。
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>对于上述的例子，&lt;code>echo $var_str&lt;/code>将会被读入，并被shell重新执行。输出结果为&lt;code>1213&lt;/code>。该结果即作为&lt;code>eval&lt;/code>的输出结果。&lt;/p></description></item></channel></rss>