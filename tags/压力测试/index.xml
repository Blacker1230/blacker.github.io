<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>压力测试 on 李岩</title><link>https://liyan-ah.github.io/tags/%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95/</link><description>Recent content in 压力测试 on 李岩</description><generator>Hugo -- gohugo.io</generator><language>zh-Hans</language><lastBuildDate>Sun, 07 Feb 2021 17:30:00 +0000</lastBuildDate><atom:link href="https://liyan-ah.github.io/tags/%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95/index.xml" rel="self" type="application/rss+xml"/><item><title>ratelimit服务流量限制</title><link>https://liyan-ah.github.io/p/ratelimit%E6%9C%8D%E5%8A%A1%E6%B5%81%E9%87%8F%E9%99%90%E5%88%B6/</link><pubDate>Sun, 07 Feb 2021 17:30:00 +0000</pubDate><guid>https://liyan-ah.github.io/p/ratelimit%E6%9C%8D%E5%8A%A1%E6%B5%81%E9%87%8F%E9%99%90%E5%88%B6/</guid><description>&lt;blockquote>
&lt;p>在日常的工作中，固定QPS或者固定并发数是常用的两个衡量系统容量时采用的流量控制手段。本文以&lt;a class="link" href="https://chai2010.cn/advanced-go-programming-book/" target="_blank" rel="noopener"
>Go语言高级编程&lt;/a> 服务流量限制的内容为开端，对服务流量限制进行展开描述，同时对&lt;code>Jmeter&lt;/code>及&lt;code>golang ratelimit&lt;/code>中的流量限制方法进行描述。&lt;/p>
&lt;/blockquote>
&lt;ol>
&lt;li>起因&lt;/li>
&lt;li>漏桶法&lt;/li>
&lt;li>令牌桶法&lt;/li>
&lt;li>Jmeter中流量吞吐控制&lt;/li>
&lt;li>golang ratelimit&lt;/li>
&lt;/ol>
&lt;!-- more-->
&lt;h1 id="起因">
&lt;a href="#%e8%b5%b7%e5%9b%a0">#&lt;/a>
起因
&lt;/h1>&lt;p>流量限制手段在系统流量控制以及系统质量评估上都有广泛的应用。对于有多个子模块/下游的系统，如果已知其中一个模块/下游是整个系统处理能力的瓶颈，从系统的入口添加流量限制并添加超量告警，不失为是保护系统的有效手段。从质量保证的手段来说，在衡量一个系统的稳定性时，需要有一个有效的手段来控制给予系统的压力并进行控制。&lt;br>
固定并发数量的流量控制方式是相对容易实现的：对于系统而言，可以添加一个连接池；对于请求方而言，维护一个请求并发池即可。对于固定QPS的流量控制手段而言，则又复杂一些：由于基本指令的直接支持，所以固定QPS的流量控制手段多在基于并发的流量控制上进行二次的封装。封装的措施实际上又会影响控制的效果。笔者曾经在搜索系统上，尝试基于Jmeter，使用1000个线程来产生一个固定的100QPS的并发数。由于Jmeter固定吞吐量实现的特点，导致实际产生的效果中，100个请求多集中在1分钟的前几秒，甚至是最开始1s的前若干ms。使得服务承受的顺势并发非常大，服务出现异常也是可以预见的事情了。&lt;br>
了解一些流量控制的手段还是有必要的。本文主要梳理一下&lt;a class="link" href="https://chai2010.cn/advanced-go-programming-book/" target="_blank" rel="noopener"
>Go语言高级编程&lt;/a>提到的漏桶及令牌桶两种方法，并且进行简单的实现。&lt;/p>
&lt;h1 id="漏桶法">
&lt;a href="#%e6%bc%8f%e6%a1%b6%e6%b3%95">#&lt;/a>
漏桶法
&lt;/h1>&lt;p>基于&lt;a class="link" href="https://en.wikipedia.org/wiki/Leaky_bucket" target="_blank" rel="noopener"
>Leaky_bucket&lt;/a>的描述，目前广泛流行的漏桶法存在两种模式：度量法（the leaky bucket as a meter）及队列法（the leaky bucket as a queue）。&lt;br>
度量法在处理时，单位时间内的请求如果超过了预设的数量，会将请求丢弃。比如，需要固定的流量为100QPS，我们以100ms作为一个衡量单元，即10 query/100ms。则，在单位的100ms内，如果请求数量超过了10，则将超过10的请求丢弃。对于队列法，则会将超过的请求均放在一个队列里，在下个时间单位内，按照先进先出的原则，处理队列内的请求。&lt;br>
在请求数量较多且分布均匀的场景下，度量法更加适用。系统已经处于处理的极限，额外的请求存储似乎不太现实。对于流量分布不均的场景下，队列法能够抹平流量的不均匀。在队列长度可控的场景下，队列法能够兼顾请求方（尽量不丢请求）及服务方（控制流量）。至于超出的部分，应该考虑引入告警等方式来把控风险。&lt;/p>
&lt;h1 id="令牌桶法">
&lt;a href="#%e4%bb%a4%e7%89%8c%e6%a1%b6%e6%b3%95">#&lt;/a>
令牌桶法
&lt;/h1>&lt;p>对令牌桶法的详细介绍见&lt;a class="link" href="https://en.wikipedia.org/wiki/Token_bucket" target="_blank" rel="noopener"
>Token bucket&lt;/a>。令牌桶法可以认为是更加一般的漏桶法。严格意义上的漏桶法要求每次仅有一个单位的请求被允许，令牌桶法则将其扩展为固定时间段内，产出多个令牌，被请求申请。当令牌桶法每次仅允许一个令牌时，显然就成了漏桶法。&lt;/p>
&lt;h1 id="jmeter中吞吐量的控制逻辑">
&lt;a href="#jmeter%e4%b8%ad%e5%90%9e%e5%90%90%e9%87%8f%e7%9a%84%e6%8e%a7%e5%88%b6%e9%80%bb%e8%be%91">#&lt;/a>
Jmeter中吞吐量的控制逻辑
&lt;/h1>&lt;p>笔者找到的Jmeter最新版本为&lt;a class="link" href="https://github.com/apache/jmeter/blob/master/src/components/src/main/java/org/apache/jmeter/timers/ConstantThroughputTimer.java" target="_blank" rel="noopener"
>ConstantThroughputTimer&lt;/a>。在该实现中，主要分为单线程、多线程、共享线程等模式下的吞吐量（Jmeter中的吞吐量为Query Per Minutes)等模式。可以看出，Jmeter在不同的限流逻辑下，计算每个线程需要的delay时间实现jmeter的请求调度，体现了漏桶法的思路。
相关代码如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="n">Calculate&lt;/span> &lt;span class="n">the&lt;/span> &lt;span class="n">delay&lt;/span> &lt;span class="n">based&lt;/span> &lt;span class="n">on&lt;/span> &lt;span class="n">the&lt;/span> &lt;span class="n">mode&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">private&lt;/span> &lt;span class="n">long&lt;/span> &lt;span class="n">calculateDelay&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">long&lt;/span> &lt;span class="n">delay&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">B&lt;/span>&lt;span class="o">.&lt;/span> &lt;span class="n">we&lt;/span> &lt;span class="n">fetch&lt;/span> &lt;span class="n">the&lt;/span> &lt;span class="n">throughput&lt;/span> &lt;span class="n">each&lt;/span> &lt;span class="n">time&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">as&lt;/span> &lt;span class="n">it&lt;/span> &lt;span class="n">may&lt;/span> &lt;span class="n">vary&lt;/span> &lt;span class="n">during&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="n">test&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">double&lt;/span> &lt;span class="n">msPerRequest&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">MILLISEC_PER_MIN&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="n">getThroughput&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">switch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">mode&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="n">AllActiveThreads&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="n">Total&lt;/span> &lt;span class="n">number&lt;/span> &lt;span class="n">of&lt;/span> &lt;span class="n">threads&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">delay&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Math&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">round&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">JMeterContextService&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getNumberOfThreads&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">msPerRequest&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="n">AllActiveThreadsInCurrentThreadGroup&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="n">Active&lt;/span> &lt;span class="n">threads&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">this&lt;/span> &lt;span class="n">group&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">delay&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Math&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">round&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">JMeterContextService&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getContext&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getThreadGroup&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getNumberOfThreads&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">msPerRequest&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="n">AllActiveThreads_Shared&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="n">All&lt;/span> &lt;span class="n">threads&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">alternate&lt;/span> &lt;span class="n">calculation&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">delay&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">calculateSharedDelay&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">allThreadsInfo&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">Math&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">round&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">msPerRequest&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="n">AllActiveThreadsInCurrentThreadGroup_Shared&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="o">//&lt;/span>&lt;span class="n">All&lt;/span> &lt;span class="n">threads&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">this&lt;/span> &lt;span class="n">group&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">alternate&lt;/span> &lt;span class="n">calculation&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">final&lt;/span> &lt;span class="n">org&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">apache&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">jmeter&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">threads&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">AbstractThreadGroup&lt;/span> &lt;span class="n">group&lt;/span> &lt;span class="o">=&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">JMeterContextService&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getContext&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getThreadGroup&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ThroughputInfo&lt;/span> &lt;span class="n">groupInfo&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threadGroupsInfoMap&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">group&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">groupInfo&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">null&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">groupInfo&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">new&lt;/span> &lt;span class="n">ThroughputInfo&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ThroughputInfo&lt;/span> &lt;span class="n">previous&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threadGroupsInfoMap&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">putIfAbsent&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">group&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">groupInfo&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">previous&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">null&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="n">We&lt;/span> &lt;span class="n">did&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="n">replace&lt;/span> &lt;span class="n">the&lt;/span> &lt;span class="n">entry&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">groupInfo&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">previous&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="n">so&lt;/span> &lt;span class="n">use&lt;/span> &lt;span class="n">the&lt;/span> &lt;span class="n">existing&lt;/span> &lt;span class="n">one&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">delay&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">calculateSharedDelay&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">groupInfo&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">Math&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">round&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">msPerRequest&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="n">ThisThreadOnly&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">default&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">g&lt;/span>&lt;span class="o">.&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">delay&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Math&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">round&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">msPerRequest&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">delay&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="golang-ratelimit介绍">
&lt;a href="#golang-ratelimit%e4%bb%8b%e7%bb%8d">#&lt;/a>
golang ratelimit介绍
&lt;/h1>&lt;p>golang中也有很多请求控制的方法。工程中经常使用的 &lt;code>chan(bool)&lt;/code>+&lt;code>WaitGroup&lt;/code>池化了请求限制，可以认为是令牌桶法的思路的一种简化；golang自带的&lt;code>Ticker&lt;/code>则会在固定的时间间隔内产生一个就绪的状态，可以看出漏桶法的思想。更加工程化的选择，可以看下&lt;a class="link" href="https://github.com/uber-go/ratelimit" target="_blank" rel="noopener"
>golang ratelimit&lt;/a>uber开源的这个golang版本的ratelimit实现。水平优先，就贴一个网上找来的源码分析文章&lt;a class="link" href="https://www.cyhone.com/articles/analysis-of-uber-go-ratelimit/" target="_blank" rel="noopener"
>uber-go 漏桶限流器使用与原理分析&lt;/a>。&lt;/p>
&lt;h1 id="总结">
&lt;a href="#%e6%80%bb%e7%bb%93">#&lt;/a>
总结
&lt;/h1>&lt;p>本文对常用的两个限流方法&lt;code>漏桶法&lt;/code>及&lt;code>令牌桶法&lt;/code>进行了简单的描述。同时简单涉及了下&lt;code>Jmeter&lt;/code>中的流量限制及&lt;code>golang&lt;/code>中不同请求限制措施的思路。&lt;/p></description></item></channel></rss>